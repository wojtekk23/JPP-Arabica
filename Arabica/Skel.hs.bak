-- Haskell module generated by the BNF converter

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module Arabica.Skel where

-- import Prelude (($), Either(..), String, (++), Show, show)
import qualified Arabica.Abs
import qualified Data.Map as M
import Arabica.Utils
import Arabica.Memory
import Data.Array
import Control.Monad.State
import Control.Monad.Reader

import Control.Monad.Trans.Maybe
import Control.Monad.Trans.Except

-- Bool - czy zmienna jest read-only
-- type VarEnv = M.Map Arabica.Abs.Ident (Arabica.Abs.Location, Bool)
-- type LocEnv = M.Map Arabica.Abs.Location Arabica.Abs.LocVal
-- type LocMemory = (LocEnv, Arabica.Abs.Location)
-- type ExpM a = ReaderT VarEnv Maybe a

type Err = Either String

assignArgsToVals :: Arabica.Abs.Ident -> [Arabica.Abs.Expr] -> [Arabica.Abs.Arg] -> Arabica.Abs.InterpretingMonadIO Arabica.Abs.VarEnv
assignArgsToVals _ [] [] = ask
assignArgsToVals ident _ [] = errorMessage $ Arabica.Abs.TooManyArgs ident
assignArgsToVals ident [] _ = errorMessage $ Arabica.Abs.NotEnoughArgs ident
assignArgsToVals ident (e:es) ((Arabica.Abs.Arg type_ ident_):as) = do
  val <- transExpr e
  newVarEnv <- newVariable False ident_ val
  local (const newVarEnv) $ assignArgsToVals ident es as

transIdent :: Arabica.Abs.Ident -> Arabica.Abs.InterpretingMonadIO ()
transIdent x = case x of
  Arabica.Abs.Ident string -> failure x

transProgram :: Show a => Arabica.Abs.Program' a -> Arabica.Abs.InterpretingMonadIO ()
transProgram x = case x of
  Arabica.Abs.Program _ topdefs -> failure x

transTopDef :: Show a => Arabica.Abs.TopDef' a -> Arabica.Abs.InterpretingMonadIO (Arabica.Abs.VarEnv, Arabica.Abs.ReturnVal)
transTopDef x = case x of
  Arabica.Abs.FnDef _ type_ ident args block -> failure x

transArg :: Show a => Arabica.Abs.Arg' a -> Arabica.Abs.InterpretingMonadIO ()
transArg x = case x of
  Arabica.Abs.Arg _ type_ ident -> failure x

transBlock :: Show a => Arabica.Abs.Block' a -> Arabica.Abs.InterpretingMonadIO Arabica.Abs.StmtState
transBlock x = case x of
  Arabica.Abs.Block _ stmts -> failure x

transStmt :: Show a => Arabica.Abs.Stmt' a -> Arabica.Abs.InterpretingMonadIO Arabica.Abs.StmtState
transStmt x = case x of
  Arabica.Abs.Empty _ -> failure x
  Arabica.Abs.BStmt _ block -> failure x
  Arabica.Abs.Decl _ type_ items -> failure x
  Arabica.Abs.Ass _ ident expr -> failure x
  Arabica.Abs.ArrAss _ ident expr1 expr2 -> failure x
  Arabica.Abs.Incr _ ident -> failure x
  Arabica.Abs.Decr _ ident -> failure x
  Arabica.Abs.Ret _ expr -> failure x
  Arabica.Abs.VRet _ -> failure x
  Arabica.Abs.Cond _ expr stmt -> failure x
  Arabica.Abs.CondElse _ expr stmt1 stmt2 -> failure x
  Arabica.Abs.While _ expr stmt -> failure x
  Arabica.Abs.Break _ -> failure x
  Arabica.Abs.Continue _ -> failure x
  Arabica.Abs.SExp _ expr -> failure x
  Arabica.Abs.ForTo _ ident expr1 expr2 stmt -> failure x
  Arabica.Abs.Print _ expr -> failure x

transItem :: Show a => Arabica.Abs.Item' a -> Arabica.Abs.InterpretingMonadIO Arabica.Abs.VarEnv
transItem x = case x of
  Arabica.Abs.NoInit _ ident -> failure x
  Arabica.Abs.Init _ ident expr -> failure x

transType :: Show a => Arabica.Abs.Type' a -> Arabica.Abs.InterpretingMonadIO ()
transType x = case x of
  Arabica.Abs.Int _ -> failure x
  Arabica.Abs.Str _ -> failure x
  Arabica.Abs.Bool _ -> failure x
  Arabica.Abs.Void _ -> failure x
  Arabica.Abs.Fun _ type_ types -> failure x
  Arabica.Abs.Array _ type_ -> failure x

transExpr :: Show a => Arabica.Abs.Expr' a -> Arabica.Abs.InterpretingMonadIO Arabica.Abs.LocVal
transExpr x = case x of
  Arabica.Abs.EArray _ type_ integer -> failure x
  Arabica.Abs.EArrElem _ ident expr -> failure x
  Arabica.Abs.ELambda _ type_ args block -> failure x
  Arabica.Abs.EVar _ ident -> failure x
  Arabica.Abs.ELitInt _ integer -> failure x
  Arabica.Abs.ELitTrue _ -> failure x
  Arabica.Abs.ELitFalse _ -> failure x
  Arabica.Abs.EApp _ ident exprs -> failure x
  Arabica.Abs.EString _ string -> failure x
  Arabica.Abs.Neg _ expr -> failure x
  Arabica.Abs.Not _ expr -> failure x
  Arabica.Abs.EMul _ expr1 mulop expr2 -> failure x
  Arabica.Abs.EAdd _ expr1 addop expr2 -> failure x
  Arabica.Abs.ERel _ expr1 relop expr2 -> failure x
  Arabica.Abs.EAnd _ expr1 expr2 -> failure x
  Arabica.Abs.EOr _ expr1 expr2 -> failure x

transAddOp :: Show a => Arabica.Abs.AddOp' a -> Arabica.Abs.Result
transAddOp x = case x of
  Arabica.Abs.Plus _ -> failure x
  Arabica.Abs.Minus _ -> failure x

transMulOp :: Show a => Arabica.Abs.MulOp' a -> Arabica.Abs.Result
transMulOp x = case x of
  Arabica.Abs.Times _ -> failure x
  Arabica.Abs.Div _ -> failure x

transRelOp :: Show a => Arabica.Abs.RelOp' a -> Arabica.Abs.Result
transRelOp x = case x of
  Arabica.Abs.LTH _ -> failure x
  Arabica.Abs.LE _ -> failure x
  Arabica.Abs.GTH _ -> failure x
  Arabica.Abs.GE _ -> failure x
  Arabica.Abs.EQU _ -> failure x
  Arabica.Abs.NE _ -> failure x
