{-# LANGUAGE CPP #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE LambdaCase #-}
#if __GLASGOW_HASKELL__ <= 708
{-# LANGUAGE OverlappingInstances #-}
#endif

{-# OPTIONS_GHC -fno-warn-incomplete-patterns #-}

-- | Pretty-printer for Arabica.
--   Generated by the BNF converter.

module Arabica.Print where

import Prelude
  ( ($), (.)
  , Bool(..), (==), (<)
  , Int, Integer, Double, (+), (-), (*)
  , String, (++)
  , ShowS, showChar, showString
  , all, dropWhile, elem, foldr, id, map, null, replicate, shows, span
  )
import Data.Char ( Char, isSpace )
import qualified Arabica.Abs

-- | The top-level printing method.

printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) "" where
  rend i = \case
    "["      :ts -> showChar '[' . rend i ts
    "("      :ts -> showChar '(' . rend i ts
    "{"      :ts -> showChar '{' . new (i+1) . rend (i+1) ts
    "}" : ";":ts -> new (i-1) . space "}" . showChar ';' . new (i-1) . rend (i-1) ts
    "}"      :ts -> new (i-1) . showChar '}' . new (i-1) . rend (i-1) ts
    [";"]        -> showChar ';'
    ";"      :ts -> showChar ';' . new i . rend i ts
    t  : ts@(p:_) | closingOrPunctuation p -> showString t . rend i ts
    t        :ts -> space t . rend i ts
    _            -> id
  new i     = showChar '\n' . replicateS (2*i) (showChar ' ') . dropWhile isSpace
  space t s =
    case (all isSpace t', null spc, null rest) of
      (True , _   , True ) -> []              -- remove trailing space
      (False, _   , True ) -> t'              -- remove trailing space
      (False, True, False) -> t' ++ ' ' : s   -- add space if none
      _                    -> t' ++ s
    where
      t'          = showString t []
      (spc, rest) = span isSpace s

  closingOrPunctuation :: String -> Bool
  closingOrPunctuation [c] = c `elem` closerOrPunct
  closingOrPunctuation _   = False

  closerOrPunct :: String
  closerOrPunct = ")],;"

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- | The printer class does the job.

class Print a where
  prt :: Int -> a -> Doc
  prtList :: Int -> [a] -> Doc
  prtList i = concatD . map (prt i)

instance {-# OVERLAPPABLE #-} Print a => Print [a] where
  prt = prtList

instance Print Char where
  prt     _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')
  prtList _ s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q = \case
  s | s == q -> showChar '\\' . showChar s
  '\\' -> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  s -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j < i then parenth else id

instance Print Integer where
  prt _ x = doc (shows x)

instance Print Double where
  prt _ x = doc (shows x)

instance Print Arabica.Abs.Ident where
  prt _ (Arabica.Abs.Ident i) = doc $ showString i

instance Print Arabica.Abs.Program where
  prt i = \case
    Arabica.Abs.Program topdefs -> prPrec i 0 (concatD [prt 0 topdefs])

instance Print Arabica.Abs.TopDef where
  prt i = \case
    Arabica.Abs.FnDef type_ id_ args block -> prPrec i 0 (concatD [prt 0 type_, prt 0 id_, doc (showString "("), prt 0 args, doc (showString ")"), prt 0 block])
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print [Arabica.Abs.TopDef] where
  prt = prtList

instance Print Arabica.Abs.Arg where
  prt i = \case
    Arabica.Abs.Arg type_ id_ -> prPrec i 0 (concatD [prt 0 type_, prt 0 id_])
  prtList _ [] = concatD []
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print [Arabica.Abs.Arg] where
  prt = prtList

instance Print Arabica.Abs.Block where
  prt i = \case
    Arabica.Abs.Block stmts -> prPrec i 0 (concatD [doc (showString "{"), prt 0 stmts, doc (showString "}")])

instance Print [Arabica.Abs.Stmt] where
  prt = prtList

instance Print Arabica.Abs.Stmt where
  prt i = \case
    Arabica.Abs.Empty -> prPrec i 0 (concatD [doc (showString ";")])
    Arabica.Abs.BStmt block -> prPrec i 0 (concatD [prt 0 block])
    Arabica.Abs.Decl type_ items -> prPrec i 0 (concatD [prt 0 type_, prt 0 items, doc (showString ";")])
    Arabica.Abs.Ass id_ expr -> prPrec i 0 (concatD [prt 0 id_, doc (showString "="), prt 0 expr, doc (showString ";")])
    Arabica.Abs.ArrAss id_ expr1 expr2 -> prPrec i 0 (concatD [prt 0 id_, doc (showString "["), prt 6 expr1, doc (showString "]"), doc (showString "="), prt 0 expr2, doc (showString ";")])
    Arabica.Abs.Incr id_ -> prPrec i 0 (concatD [prt 0 id_, doc (showString "++"), doc (showString ";")])
    Arabica.Abs.Decr id_ -> prPrec i 0 (concatD [prt 0 id_, doc (showString "--"), doc (showString ";")])
    Arabica.Abs.Ret expr -> prPrec i 0 (concatD [doc (showString "return"), prt 0 expr, doc (showString ";")])
    Arabica.Abs.VRet -> prPrec i 0 (concatD [doc (showString "return"), doc (showString ";")])
    Arabica.Abs.Cond expr stmt -> prPrec i 0 (concatD [doc (showString "if"), doc (showString "("), prt 0 expr, doc (showString ")"), prt 0 stmt])
    Arabica.Abs.CondElse expr stmt1 stmt2 -> prPrec i 0 (concatD [doc (showString "if"), doc (showString "("), prt 0 expr, doc (showString ")"), prt 0 stmt1, doc (showString "else"), prt 0 stmt2])
    Arabica.Abs.While expr stmt -> prPrec i 0 (concatD [doc (showString "while"), doc (showString "("), prt 0 expr, doc (showString ")"), prt 0 stmt])
    Arabica.Abs.Break -> prPrec i 0 (concatD [doc (showString "break"), doc (showString ";")])
    Arabica.Abs.Continue -> prPrec i 0 (concatD [doc (showString "continue"), doc (showString ";")])
    Arabica.Abs.SExp expr -> prPrec i 0 (concatD [prt 0 expr, doc (showString ";")])
    Arabica.Abs.ForTo item expr stmt -> prPrec i 0 (concatD [doc (showString "for"), prt 0 item, doc (showString "to"), prt 0 expr, doc (showString "do"), prt 0 stmt])
    Arabica.Abs.Print expr -> prPrec i 0 (concatD [doc (showString "print("), prt 0 expr, doc (showString ")")])
  prtList _ [] = concatD []
  prtList _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print Arabica.Abs.Item where
  prt i = \case
    Arabica.Abs.NoInit id_ -> prPrec i 0 (concatD [prt 0 id_])
    Arabica.Abs.Init id_ expr -> prPrec i 0 (concatD [prt 0 id_, doc (showString "="), prt 0 expr])
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print [Arabica.Abs.Item] where
  prt = prtList

instance Print Arabica.Abs.Type where
  prt i = \case
    Arabica.Abs.Int -> prPrec i 0 (concatD [doc (showString "int")])
    Arabica.Abs.Str -> prPrec i 0 (concatD [doc (showString "string")])
    Arabica.Abs.Bool -> prPrec i 0 (concatD [doc (showString "bool")])
    Arabica.Abs.Void -> prPrec i 0 (concatD [doc (showString "void")])
    Arabica.Abs.Fun type_ types -> prPrec i 0 (concatD [doc (showString "["), prt 0 type_, doc (showString "]"), doc (showString "("), prt 0 types, doc (showString ")")])
    Arabica.Abs.Array type_ -> prPrec i 0 (concatD [doc (showString "Array"), doc (showString "<"), prt 0 type_, doc (showString ">")])
  prtList _ [] = concatD []
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print [Arabica.Abs.Type] where
  prt = prtList

instance Print Arabica.Abs.Expr where
  prt i = \case
    Arabica.Abs.EArray type_ n -> prPrec i 9 (concatD [doc (showString "new"), prt 0 type_, doc (showString "["), prt 0 n, doc (showString "]")])
    Arabica.Abs.EArrElem id_ expr -> prPrec i 8 (concatD [prt 0 id_, doc (showString "["), prt 6 expr, doc (showString "]")])
    Arabica.Abs.ELambda type_ args block -> prPrec i 7 (concatD [doc (showString "["), prt 0 type_, doc (showString "]"), doc (showString "("), prt 0 args, doc (showString ")"), prt 0 block])
    Arabica.Abs.EVar id_ -> prPrec i 6 (concatD [prt 0 id_])
    Arabica.Abs.ELitInt n -> prPrec i 6 (concatD [prt 0 n])
    Arabica.Abs.ELitTrue -> prPrec i 6 (concatD [doc (showString "true")])
    Arabica.Abs.ELitFalse -> prPrec i 6 (concatD [doc (showString "false")])
    Arabica.Abs.EApp id_ exprs -> prPrec i 6 (concatD [prt 0 id_, doc (showString "("), prt 0 exprs, doc (showString ")")])
    Arabica.Abs.EString str -> prPrec i 6 (concatD [prt 0 str])
    Arabica.Abs.Neg expr -> prPrec i 5 (concatD [doc (showString "-"), prt 6 expr])
    Arabica.Abs.Not expr -> prPrec i 5 (concatD [doc (showString "!"), prt 6 expr])
    Arabica.Abs.EMul expr1 mulop expr2 -> prPrec i 4 (concatD [prt 4 expr1, prt 0 mulop, prt 5 expr2])
    Arabica.Abs.EAdd expr1 addop expr2 -> prPrec i 3 (concatD [prt 3 expr1, prt 0 addop, prt 4 expr2])
    Arabica.Abs.ERel expr1 relop expr2 -> prPrec i 2 (concatD [prt 2 expr1, prt 0 relop, prt 3 expr2])
    Arabica.Abs.EAnd expr1 expr2 -> prPrec i 1 (concatD [prt 2 expr1, doc (showString "&&"), prt 1 expr2])
    Arabica.Abs.EOr expr1 expr2 -> prPrec i 0 (concatD [prt 1 expr1, doc (showString "||"), prt 0 expr2])
  prtList _ [] = concatD []
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print [Arabica.Abs.Expr] where
  prt = prtList

instance Print Arabica.Abs.AddOp where
  prt i = \case
    Arabica.Abs.Plus -> prPrec i 0 (concatD [doc (showString "+")])
    Arabica.Abs.Minus -> prPrec i 0 (concatD [doc (showString "-")])

instance Print Arabica.Abs.MulOp where
  prt i = \case
    Arabica.Abs.Times -> prPrec i 0 (concatD [doc (showString "*")])
    Arabica.Abs.Div -> prPrec i 0 (concatD [doc (showString "/")])

instance Print Arabica.Abs.RelOp where
  prt i = \case
    Arabica.Abs.LTH -> prPrec i 0 (concatD [doc (showString "<")])
    Arabica.Abs.LE -> prPrec i 0 (concatD [doc (showString "<=")])
    Arabica.Abs.GTH -> prPrec i 0 (concatD [doc (showString ">")])
    Arabica.Abs.GE -> prPrec i 0 (concatD [doc (showString ">=")])
    Arabica.Abs.EQU -> prPrec i 0 (concatD [doc (showString "==")])
    Arabica.Abs.NE -> prPrec i 0 (concatD [doc (showString "!=")])

