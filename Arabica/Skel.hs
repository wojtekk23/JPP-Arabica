-- Haskell module generated by the BNF converter

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module Arabica.Skel where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified Arabica.Abs

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transIdent :: Arabica.Abs.Ident -> Result
transIdent x = case x of
  Arabica.Abs.Ident string -> failure x

transProgram :: Arabica.Abs.Program -> Result
transProgram x = case x of
  Arabica.Abs.Program topdefs -> failure x

transTopDef :: Arabica.Abs.TopDef -> Result
transTopDef x = case x of
  Arabica.Abs.FnDef type_ ident args block -> failure x

transArg :: Arabica.Abs.Arg -> Result
transArg x = case x of
  Arabica.Abs.Arg type_ ident -> failure x

transBlock :: Arabica.Abs.Block -> Result
transBlock x = case x of
  Arabica.Abs.Block stmts -> failure x

transStmt :: Arabica.Abs.Stmt -> Result
transStmt x = case x of
  Arabica.Abs.Empty -> failure x
  Arabica.Abs.BStmt block -> failure x
  Arabica.Abs.Decl type_ items -> failure x
  Arabica.Abs.Ass ident expr -> failure x
  Arabica.Abs.ArrAss ident expr1 expr2 -> failure x
  Arabica.Abs.Incr ident -> failure x
  Arabica.Abs.Decr ident -> failure x
  Arabica.Abs.Ret expr -> failure x
  Arabica.Abs.VRet -> failure x
  Arabica.Abs.Cond expr stmt -> failure x
  Arabica.Abs.CondElse expr stmt1 stmt2 -> failure x
  Arabica.Abs.While expr stmt -> failure x
  Arabica.Abs.Break -> failure x
  Arabica.Abs.Continue -> failure x
  Arabica.Abs.SExp expr -> failure x
  Arabica.Abs.ForTo item expr stmt -> failure x
  Arabica.Abs.Print expr -> failure x

transItem :: Arabica.Abs.Item -> Result
transItem x = case x of
  Arabica.Abs.NoInit ident -> failure x
  Arabica.Abs.Init ident expr -> failure x

transType :: Arabica.Abs.Type -> Result
transType x = case x of
  Arabica.Abs.Int -> failure x
  Arabica.Abs.Str -> failure x
  Arabica.Abs.Bool -> failure x
  Arabica.Abs.Void -> failure x
  Arabica.Abs.Fun type_ types -> failure x
  Arabica.Abs.Array type_ -> failure x

transExpr :: Arabica.Abs.Expr -> Result
transExpr x = case x of
  Arabica.Abs.EArray type_ integer -> failure x
  Arabica.Abs.EArrElem ident expr -> failure x
  Arabica.Abs.ELambda type_ args block -> failure x
  Arabica.Abs.EVar ident -> failure x
  Arabica.Abs.ELitInt integer -> failure x
  Arabica.Abs.ELitTrue -> failure x
  Arabica.Abs.ELitFalse -> failure x
  Arabica.Abs.EApp ident exprs -> failure x
  Arabica.Abs.EString string -> failure x
  Arabica.Abs.Neg expr -> failure x
  Arabica.Abs.Not expr -> failure x
  Arabica.Abs.EMul expr1 mulop expr2 -> failure x
  Arabica.Abs.EAdd expr1 addop expr2 -> failure x
  Arabica.Abs.ERel expr1 relop expr2 -> failure x
  Arabica.Abs.EAnd expr1 expr2 -> failure x
  Arabica.Abs.EOr expr1 expr2 -> failure x

transAddOp :: Arabica.Abs.AddOp -> Result
transAddOp x = case x of
  Arabica.Abs.Plus -> failure x
  Arabica.Abs.Minus -> failure x

transMulOp :: Arabica.Abs.MulOp -> Result
transMulOp x = case x of
  Arabica.Abs.Times -> failure x
  Arabica.Abs.Div -> failure x

transRelOp :: Arabica.Abs.RelOp -> Result
transRelOp x = case x of
  Arabica.Abs.LTH -> failure x
  Arabica.Abs.LE -> failure x
  Arabica.Abs.GTH -> failure x
  Arabica.Abs.GE -> failure x
  Arabica.Abs.EQU -> failure x
  Arabica.Abs.NE -> failure x
