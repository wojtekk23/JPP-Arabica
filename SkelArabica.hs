-- Haskell module generated by the BNF converter

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module SkelArabica where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified AbsArabica

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transIdent :: AbsArabica.Ident -> Result
transIdent x = case x of
  AbsArabica.Ident string -> failure x

transProgram :: AbsArabica.Program -> Result
transProgram x = case x of
  AbsArabica.Program topdefs -> failure x

transTopDef :: AbsArabica.TopDef -> Result
transTopDef x = case x of
  AbsArabica.FnDef type_ ident args block -> failure x

transArg :: AbsArabica.Arg -> Result
transArg x = case x of
  AbsArabica.Arg type_ ident -> failure x

transBlock :: AbsArabica.Block -> Result
transBlock x = case x of
  AbsArabica.Block stmts -> failure x

transStmt :: AbsArabica.Stmt -> Result
transStmt x = case x of
  AbsArabica.Empty -> failure x
  AbsArabica.BStmt block -> failure x
  AbsArabica.Decl type_ items -> failure x
  AbsArabica.Ass ident expr -> failure x
  AbsArabica.Ret expr -> failure x
  AbsArabica.VRet -> failure x
  AbsArabica.CondElse expr stmt1 stmt2 -> failure x
  AbsArabica.Cond expr stmt -> failure x
  AbsArabica.While expr stmt -> failure x
  AbsArabica.ForTo item expr stmt -> failure x
  AbsArabica.ForDownTo item expr stmt -> failure x
  AbsArabica.SPrint expr -> failure x
  AbsArabica.SExp expr -> failure x

transItem :: AbsArabica.Item -> Result
transItem x = case x of
  AbsArabica.NoInit ident -> failure x
  AbsArabica.Init ident expr -> failure x

transType :: AbsArabica.Type -> Result
transType x = case x of
  AbsArabica.Int -> failure x
  AbsArabica.Str -> failure x
  AbsArabica.Bool -> failure x
  AbsArabica.Void -> failure x
  AbsArabica.Fun type_ types -> failure x

transExpr :: AbsArabica.Expr -> Result
transExpr x = case x of
  AbsArabica.EVar ident -> failure x
  AbsArabica.ELitInt integer -> failure x
  AbsArabica.ELitTrue -> failure x
  AbsArabica.ELitFalse -> failure x
  AbsArabica.EApp ident exprs -> failure x
  AbsArabica.EString string -> failure x
  AbsArabica.EtoString expr -> failure x
  AbsArabica.EtoInt expr -> failure x
  AbsArabica.Neg expr -> failure x
  AbsArabica.Not expr -> failure x
  AbsArabica.EMul expr1 mulop expr2 -> failure x
  AbsArabica.EAdd expr1 addop expr2 -> failure x
  AbsArabica.ERel expr1 relop expr2 -> failure x
  AbsArabica.EAnd expr1 expr2 -> failure x
  AbsArabica.EOr expr1 expr2 -> failure x

transAddOp :: AbsArabica.AddOp -> Result
transAddOp x = case x of
  AbsArabica.Plus -> failure x
  AbsArabica.Minus -> failure x

transMulOp :: AbsArabica.MulOp -> Result
transMulOp x = case x of
  AbsArabica.Times -> failure x
  AbsArabica.Div -> failure x

transRelOp :: AbsArabica.RelOp -> Result
transRelOp x = case x of
  AbsArabica.LTH -> failure x
  AbsArabica.LE -> failure x
  AbsArabica.GTH -> failure x
  AbsArabica.GE -> failure x
  AbsArabica.EQU -> failure x
  AbsArabica.NE -> failure x
